def BRANCH = ""
def version = ""
def appName = ""
def dirDeploy = "orchestrators/conso/k8s/app/deploy"
def dirService = "orchestrators/conso/k8s/app/virtualservice"

def getFiles(dir) {
	files = findFiles(glob: "${dir}/*.*")
	return files.toList()
}

pipeline {

	agent { label "debian" }
	tools {
        maven 'maven-360'
    }
	stages {

		stage ("Inicializacion") {
            steps {
				echo "Inicio pipeline"
            }
        }

        stage ("artifactId y version desde el pom.xml") {
            steps {
            	script {
            		pom = readMavenPom file: 'pom.xml'
    				version = pom.version
    				appName = pom.artifactId.toLowerCase()
    				BRANCH = BRANCH_NAME.substring(BRANCH_NAME.lastIndexOf('/') + 1, BRANCH_NAME.length())
            	}
            }
        }

        stage ("Echo variables") {
            steps {
				echo "version = ${version}"
				echo "appName = ${appName}"
				echo "BRANCH_NAME = ${BRANCH}"
            }
        }

        stage("Deploy") {
        	steps {
				timeout(time: 24, unit: 'HOURS') {
                    script {
                       def INPUT = input message: 'Please Provide Parameters', ok: 'Next',
                            parameters: [
                            choice(name: 'ENVIRONMENT', choices: ['conso','qa', 'pre', 'pro'].join('\n'), description: 'Please select the Environment'),
                            choice(name: 'FILE_DEPLOY', choices: getFiles("${dirDeploy}"), description: 'Available File deployment')]
                        env.ENVIRONMENT = INPUT.ENVIRONMENT
                        env.FILE_DEPLOY = INPUT.FILE_DEPLOY
                        
                        echo "environment = ${env.ENVIRONMENT}"
                        echo "deploy = ${env.FILE_DEPLOY}"
                    }
	        	}
	    	}
	    }
	    
	    stage("Service") {
        	steps {
				timeout(time: 24, unit: 'HOURS') {
                    script {
                       def INPUT_DEPLOY = input message: 'Please Provide Parameters', ok: 'Next',
                            parameters: [
                            choice(name: 'ENVIRONMENT', choices: ['conso','qa', 'pre', 'pro'].join('\n'), description: 'Please select the Environment'),
                            choice(name: 'FILE_SERVICE', choices: getFiles("${dirService}"), description: 'Available File deployment')]
                        env.ENVIRONMENT = INPUT.ENVIRONMENT
                        env.FILE_SERVICE = INPUT.FILE_SERVICE
                        
                        echo "environment = ${env.ENVIRONMENT}"
                        echo "srvice = ${env.FILE_SERVICE}"
                    }
	        	}
	    	}
	    }

    }

	post {
        always {
			echo "Fin Proceso"
        }
        success {
            echo "Fin OK";
        }
        unstable {
            echo "Fin inestable";
        }
        failure {
            echo "Fin KO";
        }
    }
}
